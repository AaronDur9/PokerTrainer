/*
Autores:
-Aarón Durán Sánchez
-Javier López de Lerma
-Mateo García Fuentes
-Carlos López Martínez


 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pokertrainer.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pokertrainer.controller.GameController;

/**
 *
 * @author Carlos
 */
public class MenuPanel extends javax.swing.JPanel {

    private GameController controller;
    
    /**
     * Creates new form MenuPanel
     */
    public MenuPanel() {
        initComponents();
        QuantitySlider.setValue(0);
        QuantitySlider.setMinimum(2);
        QuantityTField.setEditable(false);
        initEvents();
        bet = false;
    }
    
    public void update(int playerMoney, int playerBet, int bigBlind, int highBet,
            boolean bot) {
        
        setVisibilityOfMenuPanel(bot);
        
        this.bet = false;
        this.CallButton.setEnabled(true);
        this.CallButton.setText("Call");
        this.QuantitySlider.setEnabled(true);
        this.QuantityTField.setEnabled(true);
        
        int minimum;
        int maximum;
        
        if (highBet == playerBet) this.CallButton.setText("Check");
        
        if (highBet == 0) {
            this.CallButton.setText("Check");
            if (playerMoney > bigBlind) {
                minimum = bigBlind;
                maximum = playerMoney;
                this.RaiseButton.setText("Bet");
                this.bet = true;
            }
            else {
                changeRaiseForAllIn();
                minimum = maximum = playerMoney;
            }
        } else {
            if (playerMoney + playerBet <= highBet) {
                this.CallButton.setEnabled(false);
                changeRaiseForAllIn();
                minimum = maximum = playerMoney + playerBet;
            } else {
                if (playerMoney + playerBet > highBet + bigBlind) {
                    minimum = bigBlind + highBet;
                    maximum = playerMoney + playerBet;
                    this.RaiseButton.setText("Raise to");
                } else {
                    minimum = maximum = playerMoney + playerBet;
                    changeRaiseForAllIn();
                }
            }     
        }

        this.QuantitySlider.setMinimum(minimum);
        this.QuantitySlider.setMaximum(maximum);
        this.QuantitySlider.setValue(minimum);
    }
    
    //Cambia el texto del boton Raise a AllIn y pone el Slider a no editable
    private void changeRaiseForAllIn() {
        this.RaiseButton.setText("All-in");
        this.QuantitySlider.setEnabled(false);
    }
    
    public void setController(GameController controller) {
        this.controller = controller;
    }
    
    public void setVisibilityOfMenuPanel(boolean flag) {
        this.CallButton.setVisible(flag);
        this.FoldButton.setVisible(flag);
        this.RaiseButton.setVisible(flag);
        this.QuantitySlider.setVisible(flag);
        this.QuantityTField.setVisible(flag);
    }
    
    public void disableButtons() {
        this.CallButton.setEnabled(false);
        this.FoldButton.setEnabled(false);
        this.RaiseButton.setEnabled(false);
        this.QuantitySlider.setEnabled(false);
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CallButton = new javax.swing.JButton();
        FoldButton = new javax.swing.JButton();
        RaiseButton = new javax.swing.JButton();
        QuantitySlider = new javax.swing.JSlider();
        QuantityTField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 0, 0));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CallButton.setBackground(new java.awt.Color(0, 0, 0));
        CallButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CallButton.setForeground(new java.awt.Color(255, 255, 255));
        CallButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/iconButton.png"))); // NOI18N
        CallButton.setText("Call");
        CallButton.setToolTipText("");
        CallButton.setBorder(null);
        CallButton.setBorderPainted(false);
        CallButton.setContentAreaFilled(false);
        CallButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CallButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/pressedIconButton.png"))); // NOI18N
        CallButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/hoverIconButton.png"))); // NOI18N
        add(CallButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 11, -1, -1));

        FoldButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        FoldButton.setForeground(new java.awt.Color(255, 255, 255));
        FoldButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/iconButton.png"))); // NOI18N
        FoldButton.setText("Fold");
        FoldButton.setBorder(null);
        FoldButton.setBorderPainted(false);
        FoldButton.setContentAreaFilled(false);
        FoldButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FoldButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/pressedIconButton.png"))); // NOI18N
        FoldButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/hoverIconButton.png"))); // NOI18N
        add(FoldButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 11, -1, -1));

        RaiseButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RaiseButton.setForeground(new java.awt.Color(255, 255, 255));
        RaiseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/iconButton.png"))); // NOI18N
        RaiseButton.setText("Raise to");
        RaiseButton.setBorder(null);
        RaiseButton.setBorderPainted(false);
        RaiseButton.setContentAreaFilled(false);
        RaiseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RaiseButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/pressedIconButton.png"))); // NOI18N
        RaiseButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/pokertrainer/view/img/button/hoverIconButton.png"))); // NOI18N
        add(RaiseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 11, -1, -1));

        QuantitySlider.setBackground(new java.awt.Color(0, 0, 0));
        QuantitySlider.setFont(new java.awt.Font("Agency FB", 0, 11)); // NOI18N
        add(QuantitySlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(529, 38, 151, -1));

        QuantityTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        QuantityTField.setText("2");
        add(QuantityTField, new org.netbeans.lib.awtextra.AbsoluteConstraints(529, 12, 151, -1));
    }// </editor-fold>//GEN-END:initComponents


    private boolean bet;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CallButton;
    private javax.swing.JButton FoldButton;
    private javax.swing.JSlider QuantitySlider;
    private javax.swing.JTextField QuantityTField;
    private javax.swing.JButton RaiseButton;
    // End of variables declaration//GEN-END:variables

    private void initEvents() {
        CallButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                controller.playerCalls(CallButton.getText());
            }
        });
        FoldButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                controller.playerFolds();
                
            }
        });
        RaiseButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                controller.playerRaises(QuantitySlider.getValue(), RaiseButton.getText());
                
            }
        });
        QuantitySlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = QuantitySlider.getValue();
                QuantityTField.setText(String.valueOf(value));
                
                if(value == QuantitySlider.getMaximum()){
                    RaiseButton.setText("All-in");
                } else {
                    if (bet) RaiseButton.setText("Bet");
                    else RaiseButton.setText("Raise to");
                }
            }
        });
    }

 
}
